% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgx-compute.R
\name{pgx.computePGX}
\alias{pgx.computePGX}
\title{Main function to populate pgx with results}
\usage{
pgx.computePGX(
  pgx,
  max.genes = 19999,
  max.genesets = 5000,
  gx.methods = c("ttest.welch", "trend.limma", "edger.qlf"),
  gset.methods = c("fisher", "gsva", "fgsea"),
  do.cluster = TRUE,
  use.design = TRUE,
  prune.samples = FALSE,
  extra.methods = c("meta.go", "infer", "deconv", "drugs", "wordcloud", "wgcna")[c(1, 2)],
  libx.dir = NULL,
  progress = NULL
)
}
\arguments{
\item{pgx}{value}

\item{max.genes}{value}

\item{max.genesets}{value}

\item{gx.methods}{value}

\item{gset.methods}{value}

\item{do.cluster}{value}

\item{use.design}{value}

\item{prune.samples}{value}

\item{extra.methods}{value}

\item{progress}{value}
}
\description{
Main function to populate pgx with results
}
\examples{
# first step is to create pgx 
pgx <- playbase::pgx.createPGX(
 counts = playbase::COUNTS,
 samples = playbase::SAMPLES,
 contrasts = playbase::CONTRASTS
)

# once pgx is created, we can compute the modules
pgx <- playbase::pgx.computePGX(
  pgx = pgx
)

# if you want a more minimal (and quick) example for testing, use the settings below

pgx <- playbase::pgx.createPGX(
 counts = playbase::COUNTS,
 samples = playbase::SAMPLES,
 contrasts = playbase::CONTRASTS[1]
)

pgx <- playbase::pgx.computePGX(
  pgx = pgx,
  max.genes = 10000,
  max.genesets = 1000,
  gx.methods = c("ttest.welch"),
  gset.methods = c("fisher")
)
}
